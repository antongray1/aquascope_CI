{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Background","text":"<p>This project is a successor to the C-WAP pipeline and is intended to process SARS-CoV-2 wastewater samples to determine relative variant abundance.  </p> <p>Aquascope is a bioinformatics best-practice analysis pipeline for Pipeline is for early detection of SARS-CoV-2 variants of concern via Targeted-amplicon metagenomic sequencing of wastewater. It is built using Nextflow, a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. Where possible, these processes have been submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community!</p>"},{"location":"output/","title":"nf-core/aquascope: Output","text":""},{"location":"output/#introduction","title":"Introduction","text":"<p>This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline.</p> <p>The directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.</p>"},{"location":"output/#pipeline-overview","title":"Pipeline overview","text":"<p>The pipeline is built using Nextflow and processes data using the following steps:</p> <ul> <li>FastQC - Raw read QC</li> <li>MultiQC - Aggregate report describing results and QC from the whole pipeline</li> <li>Pipeline information - Report metrics generated during the workflow execution</li> </ul>"},{"location":"output/#fastqc","title":"FastQC","text":"Output files <ul> <li><code>fastqc/</code></li> <li><code>*_fastqc.html</code>: FastQC report containing quality metrics.</li> <li><code>*_fastqc.zip</code>: Zip archive containing the FastQC report, tab-delimited data file and plot images.</li> </ul> <p>FastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages.</p> <p></p> <p></p> <p></p> <p>:::note The FastQC plots displayed in the MultiQC report shows untrimmed reads. They may contain adapter sequence and potentially regions with low quality. :::</p>"},{"location":"output/#multiqc","title":"MultiQC","text":"Output files <ul> <li><code>multiqc/</code></li> <li><code>multiqc_report.html</code>: a standalone HTML file that can be viewed in your web browser.</li> <li><code>multiqc_data/</code>: directory containing parsed statistics from the different tools used in the pipeline.</li> <li><code>multiqc_plots/</code>: directory containing static images from the report in various formats.</li> </ul> <p>MultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory.</p> <p>Results generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info.</p>"},{"location":"output/#pipeline-information","title":"Pipeline information","text":"Output files <ul> <li><code>pipeline_info/</code></li> <li>Reports generated by Nextflow: <code>execution_report.html</code>, <code>execution_timeline.html</code>, <code>execution_trace.txt</code> and <code>pipeline_dag.dot</code>/<code>pipeline_dag.svg</code>.</li> <li>Reports generated by the pipeline: <code>pipeline_report.html</code>, <code>pipeline_report.txt</code> and <code>software_versions.yml</code>. The <code>pipeline_report*</code> files will only be present if the <code>--email</code> / <code>--email_on_fail</code> parameter's are used when running the pipeline.</li> <li>Reformatted samplesheet files used as input to the pipeline: <code>samplesheet.valid.csv</code>.</li> <li>Parameters used by the pipeline run: <code>params.json</code>.</li> </ul> <p>Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.</p>"},{"location":"usage/","title":"CDCgov/aquascope: Usage","text":""},{"location":"usage/#please-read-this-documentation-aquascope-user-guide","title":"Please read this documentation: Aquascope-User-Guide","text":"<p>Documentation of pipeline parameters is generated automatically from the pipeline schema and can no longer be found in markdown files.</p>"},{"location":"usage/#introduction","title":"Introduction","text":""},{"location":"usage/#samplesheet-input","title":"Samplesheet input","text":"<p>You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below.</p> <pre><code>--input '[path to samplesheet file]'\n</code></pre>"},{"location":"usage/#full-samplesheet","title":"Full samplesheet","text":"<p>The pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. It auto-detects sequencing platform (Illumina, Ion-torrent and Oxford nanopore) and determines which set of tools have to be run. The samplesheet must have 7 columns, and have to be in the same order as the header shown below.</p> <p>A final samplesheet file consisting of both single- and paired-end Illumina data may look something like the one below. This is for 2 samples.</p> <pre><code>sample,platform,fastq_1,fastq_2,lr,bam_file,bedfile\nSAMPLE1_PE,illumina,https://raw.githubusercontent.com/nf-core/test-datasets/viralrecon/illumina/amplicon/sample1_R1.fastq.gz,https://raw.githubusercontent.com/nf-core/test-datasets/viralrecon/illumina/amplicon/sample1_R2.fastq.gz,,,https://raw.githubusercontent.com/artic-network/primer-schemes/master/nCoV-2019/V3/nCoV-2019.primer.bed\nSAMPLE1_SE,illumina,https://raw.githubusercontent.com/nf-core/test-datasets/viralrecon/illumina/amplicon/sample1_R1.fastq.gz,,,,https://raw.githubusercontent.com/artic-network/primer-schemes/master/nCoV-2019/V3/nCoV-2019.primer.bed\n</code></pre> Column Description <code>sample</code> Custom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores (<code>_</code>). <code>platform</code> Sequencing platform. This entry will determine the type of sequencing used. It is an important entry as the decision to run a set of tools is determined by this entry. <code>fastq_1</code> Full path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <code>fastq_2</code> Full path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <code>lr</code> Full path to FastQ file for ONT long reads. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". fast5 files are not expected or accepted <code>bam_file</code> Full path to BAM file for Ion-torrent short reads. File has to .bam strictly <code>bedfile</code> Full path to local bed file or rawgithub url. File has to .tsv <p>An example samplesheet has been provided with the pipeline.</p>"},{"location":"usage/#running-the-pipeline","title":"Running the pipeline","text":"<p>The typical command for running the pipeline is as follows:</p> <pre><code>nextflow run CDCgov/aquascope --input samplesheet.csv -profile singularity\n</code></pre> <p>This will launch the pipeline with the <code>singularity</code> configuration profile. See below for more information about profiles.</p> <p>Note that the pipeline will create the following files in your working directory:</p> <pre><code>work            # Directory containing the nextflow working files\nresults         # Finished results (configurable, see below)\n.nextflow_log   # Log file from Nextflow\n# Other nextflow hidden files, eg. history of pipeline runs and old logs.\n</code></pre>"},{"location":"usage/#updating-the-pipeline","title":"Updating the pipeline","text":"<p>When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline:</p> <pre><code>nextflow pull CDCgov/aquascope\n</code></pre>"},{"location":"usage/#reproducibility","title":"Reproducibility","text":"<p>It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since.</p> <p>First, go to the CDCgov/aquascope releases page and find the latest version number - numeric only (eg. <code>2.0.0</code>). Then specify this when running the pipeline with <code>-r</code> (one hyphen) - eg. <code>-r 2.0.0</code>.</p> <p>This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future.</p>"},{"location":"usage/#core-nextflow-arguments","title":"Core Nextflow arguments","text":"<p>NB: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen).</p>"},{"location":"usage/#-profile","title":"<code>-profile</code>","text":"<p>Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.</p> <p>Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Conda) - see below. When using Biocontainers, most of these software packaging methods pull Docker containers from quay.io e.g FastQC except for Singularity which directly downloads Singularity images via https hosted by the Galaxy project and Conda which downloads and installs software locally from Bioconda.</p> <p>We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported.</p> <p>The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.</p> <p>Note that multiple profiles can be loaded, for example: <code>-profile test,docker</code> - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.</p> <p>If <code>-profile</code> is not specified, the pipeline will run locally and expect all software to be installed and available on the <code>PATH</code>. This is not recommended.</p> <ul> <li><code>docker</code><ul> <li>A generic configuration profile to be used with Docker</li> </ul> </li> <li><code>singularity</code><ul> <li>A generic configuration profile to be used with Singularity</li> </ul> </li> <li><code>podman</code><ul> <li>A generic configuration profile to be used with Podman</li> </ul> </li> <li><code>shifter</code><ul> <li>A generic configuration profile to be used with Shifter</li> </ul> </li> <li><code>charliecloud</code><ul> <li>A generic configuration profile to be used with Charliecloud</li> </ul> </li> <li><code>conda</code><ul> <li>A generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter or Charliecloud.</li> </ul> </li> <li><code>test</code><ul> <li>A profile with a complete configuration for automated testing</li> <li>Includes links to test data so needs no other parameters</li> </ul> </li> </ul>"},{"location":"usage/#-resume","title":"<code>-resume</code>","text":"<p>Specify this when restarting a pipeline. Nextflow will used cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously.</p> <p>You can also supply a run name to resume a specific run: <code>-resume [run-name]</code>. Use the <code>nextflow log</code> command to show previous run names.</p>"},{"location":"usage/#-c","title":"<code>-c</code>","text":"<p>Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.</p>"},{"location":"usage/#custom-configuration","title":"Custom configuration","text":""},{"location":"usage/#updating-containers","title":"Updating containers","text":"<p>The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. If for some reason you need to use a different version of a particular tool with the pipeline then you just need to identify the <code>process</code> name and override the Nextflow <code>container</code> definition for that process using the <code>withName</code> declaration. For example, in the nf-core/viralrecon pipeline a tool called Pangolin has been used during the COVID-19 pandemic to assign lineages to SARS-CoV-2 genome sequenced samples. Given that the lineage assignments change quite frequently it doesn't make sense to re-release the nf-core/viralrecon everytime a new version of Pangolin has been released. However, you can override the default container used by the pipeline by creating a custom config file and passing it as a command-line argument via <code>-c custom.config</code>.</p> <ol> <li>Check the default version used by the pipeline in the module file for Pangolin</li> <li>Find the latest version of the Biocontainer available on Quay.io</li> <li> <p>Create the custom config accordingly:</p> <ul> <li> <p>For Docker:</p> <pre><code>process {\n    withName: PANGOLIN {\n        container = 'quay.io/biocontainers/pangolin:3.0.5--pyhdfd78af_0'\n    }\n}\n</code></pre> </li> <li> <p>For Singularity:</p> <pre><code>process {\n    withName: PANGOLIN {\n        container = 'https://depot.galaxyproject.org/singularity/pangolin:3.0.5--pyhdfd78af_0'\n    }\n}\n</code></pre> </li> <li> <p>For Conda:</p> <pre><code>process {\n    withName: PANGOLIN {\n        conda = 'bioconda::pangolin=3.0.5'\n    }\n}\n</code></pre> </li> </ul> </li> </ol> <p>NB: If you wish to periodically update individual tool-specific results (e.g. Pangolin) generated by the pipeline then you must ensure to keep the <code>work/</code> directory otherwise the <code>-resume</code> ability of the pipeline will be compromised and it will restart from scratch.</p>"},{"location":"usage/#nf-coreconfigs","title":"nf-core/configs","text":"<p>In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the <code>nf-core/configs</code> git repository. Before you do this please can you test that the config file works with your pipeline of choice using the <code>-c</code> parameter. You can then create a pull request to the <code>nf-core/configs</code> repository with the addition of your config file, associated documentation file (see examples in <code>nf-core/configs/docs</code>), and amending <code>nfcore_custom.config</code> to include your custom profile.</p> <p>See the main Nextflow documentation for more information about creating your own configuration files.</p> <p>If you have any questions or issues please send us a message on Slack on the <code>#configs</code> channel.</p>"},{"location":"usage/#running-in-the-background","title":"Running in the background","text":"<p>Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished.</p> <p>The Nextflow <code>-bg</code> flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file.</p> <p>Alternatively, you can use <code>screen</code> / <code>tmux</code> or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).</p>"},{"location":"usage/#nextflow-memory-requirements","title":"Nextflow memory requirements","text":"<p>In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in <code>~/.bashrc</code> or <code>~./bash_profile</code>):</p> <pre><code>NXF_OPTS='-Xms1g -Xmx4g'\n</code></pre>"},{"location":"user-guide/contributions/","title":"Contributions","text":"<p><code>Aquascope</code> was largely developed by OAMD's SciComp Team, with inputs from NWSS and the DCIPHER Team at Palantir:</p> <ul> <li>Boddapati, A.</li> <li>Hunter, S.</li> <li>Chavan, S.</li> <li>Chill, S.</li> <li>Caravas, J.</li> <li>Cornforth, D.</li> <li>Yoder, J.</li> <li>Morrison, S.</li> </ul>"},{"location":"user-guide/getting-started/","title":"Pipeline overview","text":"<p>The pipeline is built using Nextflow as it's workflow manager.</p>"},{"location":"user-guide/getting-started/#entry-points","title":"Entry Points","text":"<p>Currently, there are 3 entrypoints for the Aquascope pipeline</p> <ol> <li><code>QUALITY_ALIGN</code>: for executing quality control, quality reporting, and alignment</li> <li><code>FREYJA_ONLY</code>: for executing <code>freyja</code> sub-workflow, including variant calling and abundance estimations<ul> <li>Requires aligned and trimmed BAM files as input</li> </ul> </li> <li><code>AQUASCOPE</code>: for executing both <code>QUALITY_ALIGN</code> and <code>FREYJA_ONLY</code> as END-TO-END analysis</li> </ol>"},{"location":"user-guide/getting-started/#processes","title":"Processes","text":""},{"location":"user-guide/getting-started/#fastqc","title":"FASTQC","text":"<ul> <li>FastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages.</li> <li>Input: Raw and Trimmed short-read data.</li> <li>Output: Quality metrics for raw and trimmed short-read data.</li> </ul>"},{"location":"user-guide/getting-started/#nanoplot","title":"NANOPLOT","text":"<ul> <li>NanoPlot gives general quality metrics about your sequenced reads. its a Plotting tool for long read sequencing data and alignments.</li> <li>Input: Raw and Trimmed long-read data.</li> <li>Output: Quality metrics for long-read data.</li> </ul>"},{"location":"user-guide/getting-started/#fastp","title":"FASTP","text":"<ul> <li>Fastp A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.</li> <li>Input: Trimmed reads from short and long-reads.</li> <li>Output: Adapter trimmed reads for both long and short-read data.</li> </ul>"},{"location":"user-guide/getting-started/#qualimapbamqc","title":"Qualimap/BAMQC","text":"<ul> <li>Qualimap Qualimap examines sequencing alignment data in SAM/BAM files according to the features of the mapped reads and provides an overall view of the data that helps to the detect biases in the sequencing and/or mapping of the data and eases decision-making for further analysis.</li> <li>Input: BAM files from alignment step.</li> <li>Output: Quality metrics and coverage statistics reports.</li> </ul>"},{"location":"user-guide/getting-started/#alignmentminimap2","title":"ALIGNMENT/MINIMAP2","text":"<ul> <li>Minimap2 Minimap2 is a versatile sequence alignment program that aligns DNA or mRNA sequences against a large reference database. Typical use cases include: (1) mapping PacBio or Oxford Nanopore genomic reads to the human genome; (2) finding overlaps between long reads with error rate up to ~15%; (3) splice-aware alignment of PacBio Iso-Seq or Nanopore cDNA or Direct RNA reads against a reference genome; (4) aligning Illumina single- or paired-end reads; (5) assembly-to-assembly alignment; (6) full-genome alignment between two closely related species with divergence below ~15%.</li> <li>Input: Trimmed reads from FASTP step.</li> <li>Output: Aligned reads in BAM format.</li> </ul>"},{"location":"user-guide/getting-started/#samtools","title":"SAMTOOLS","text":"<ul> <li>Samtools Samtools is a suite of programs for interacting with high-throughput sequencing data.</li> <li>Input: BAM file from the ALIGNMENT step.</li> <li>Output: Statistics on each BAM file and a reference index.</li> </ul>"},{"location":"user-guide/getting-started/#primertrimming","title":"PRIMERTRIMMING","text":"<ul> <li>ivarTrim iVar uses primer positions supplied in a BED file to soft clip primer sequences from an aligned and sorted BAM file. Following this, the reads are trimmed based on a quality threshold(Default: 20)</li> <li>AmpliconClip Clips the ends of read alignments if they intersect with regions defined in a BED file. While this tool was originally written for clipping read alignment positions which correspond to amplicon primer locations it can also be used in other contexts. </li> <li>Input: Aligned BAM files.</li> <li>Output: BAM files with primers trimmed.</li> </ul>"},{"location":"user-guide/getting-started/#variantcalling","title":"VariantCalling","text":"<ul> <li>ivarVariantCalling iVar uses the output of the samtools mpileup command to call variants - single nucleotide variants(SNVs) and indels.</li> <li>Freyja Perform variant calling using samtools and iVar on a BAMFILE and generates relative lineage abundances from VARIANTS and DEPTHS.</li> <li>Input: Primer trimmed BAM files.</li> <li>Output: Variant calls and demixed sequences.</li> </ul>"},{"location":"user-guide/getting-started/#multiqc","title":"MultiQC","text":"<ul> <li>MultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory.</li> <li>Results generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info.</li> <li>Input: FASTQC data files</li> <li>Output: MultQC report.</li> </ul>"},{"location":"user-guide/getting-started/#execution-reports","title":"Execution Reports","text":"<ul> <li>Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.</li> </ul>"},{"location":"user-guide/getting-started/#dependencies","title":"Dependencies","text":"<ol> <li> <p>Install <code>Nextflow</code> (<code>&gt;=21.04.0</code>)</p> </li> <li> <p>Install any necessary software, based on deployment strategy, visiting docs for configuration related information: </p> </li> <li> <p><code>Docker</code></p> </li> <li><code>Singularity</code></li> <li><code>Conda</code> </li> </ol>"},{"location":"user-guide/output/","title":"aquascope: Output","text":""},{"location":"user-guide/output/#introduction","title":"Introduction","text":"<p>This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline.</p> <p>The directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.</p>"},{"location":"user-guide/output/#fastqc","title":"FASTQC","text":"<p>This folder contains FastQC reports for ILLUMINA data, both pre and post trimming. <code>Raw_Reads</code> and <code>Trimmed_Reads</code> are the output directories. - Output: Quality metrics for raw and trimmed short-read data.</p> Output files <ul> <li><code>fastqc/</code><ul> <li><code>*_fastqc.html</code>: FastQC report containing quality metrics.</li> <li><code>*_fastqc.zip</code>: Zip archive containing the FastQC report, tab-delimited data file and plot images.</li> </ul> </li> </ul>"},{"location":"user-guide/output/#nanoplot","title":"NANOPLOT","text":"<p>This folder contains NanoPlot reports for ONT data, both pre and post trimming. <code>Raw_Reads</code> and <code>Trimmed_Reads</code> are the output directories. - Output: Quality metrics for long-read data.</p> Output files  * `nanoplot/`     * `*_QualityScatterPlot_dot.html &amp;.png`: Nanoplot report containing quality metrics.     * `*WeightedHistogramReadlength.html &amp; .png`: Weighted histogram on read lengths.     * `*NonWeightedHistogramReadlength.html &amp; .png`: Non-Weighted histogram on read lengths.     * `NanoPlot-report.html`: Cumulative report of all the above metrics.     * `NanoStats.txt`: Cumulative statistics of Read lengths, read quality, basepair quality, N50 metrics."},{"location":"user-guide/output/#fastp","title":"FASTP","text":"<p>This folder contains trimmed reads from both short and long reads. - Output: Adapter trimmed reads for both long and short-read data.</p> Output files  * `fastp/`     * `*_fastp.html`: Fastp report of trimmed reads and post trimming quality metrics.     * `*_fastp.json`: json file for the above report.     * `*_fastp.fastq.gz`: a trimmed fastq file for both short and long-reads"},{"location":"user-guide/output/#qualimapbamqc","title":"Qualimap/BAMQC","text":"<p>This folder contains BAMQC reports for aligned reads. It includes quality metrics and coverage statistics for BAM files. - Output: Quality metrics and coverage statistics reports.</p> Output files  * `Bamqc/`     * `*qualimapReport.html`: Qualimap - Bamqc report of aligned BAM file.     * `*raw_data_qualimapReport`: Coverage, gc content, nucleotide content, mapping quality metrics are reported in this folder.     * `*genome_results.txt`: cumulative report containing all the above metrics."},{"location":"user-guide/output/#alignmentminimap2","title":"ALIGNMENT/MINIMAP2","text":"<p>This folder contains alignment files generated using Minimap2. - Output: Aligned reads in BAM format.</p> Output files  * `minimap2/`     * `*.bam`: Aligned bam files"},{"location":"user-guide/output/#samtools","title":"SAMTOOLS","text":"<p>This folder contains BAM file statistics and reference indexing. - Output: Statistics on each BAM file and a reference index.</p> Output files  * `Samtools/`     * `*.flagstat`: Primary statistics on aligned bam files     * `*.stats` : General statistics     * `*.reference.fasta.fai`: Reference index"},{"location":"user-guide/output/#primertrimming","title":"PRIMERTRIMMING","text":"<p>This folder contains reads with trimmed primers using <code>samtools ampliconclip</code> for ONT data and <code>ivar trim</code> for Illumina data. - Output: BAM files with primers trimmed.</p> Output files  * `iVarTrim (Illumina)`     * `*.ivar_trim.bam`: ivar trimmed bam files, the primers used here are SARS-CoV2 based.  * `AmpliconClip (Oxford Nanopore)`     * `*.ampliconclip.clipallowed.bam`: samtools amplicon clip trimmed bam files."},{"location":"user-guide/output/#variantcalling","title":"VariantCalling","text":"<p>This folder contains variant calling and demixing results using Freyja. - Output: Variant calls and demixed sequences.</p> Output files  * `iVarTrim/VarCalls`     * `*.tsv`: ivar trimmed variant calls     * `*.mpileup` : mpileup files from ivar trimmed BAM files only.  * `Freyja/VarCalls`     * `*.depth.tsv` : Basepair depth at each position.     * `*.variants.tsv` : Variant calls from both ivar and ampliconclip trimmed BAM files  * `Freyja/Demix`     * `*.tsv` : Lineage abundances of Sars-cov-2"},{"location":"user-guide/output/#multiqc","title":"MultiQC","text":"<p>This folder contains an aggregated report describing quality control results from the pipeline. - Output: MultQC report.</p> Output files  * `multiqc/`     * `multiqc_report.html`: a standalone HTML file that can be viewed in your web browser.     * `multiqc_data/`: directory containing parsed statistics from the different tools used in the pipeline.     * `multiqc_plots/`: directory containing static images from the report in various formats."},{"location":"user-guide/output/#execution-reports","title":"Execution Reports","text":"<p>This folder contains report metrics generated during the workflow execution. - Output: Execution based reports.</p> Output files  * `pipeline_info/`     * Reports generated by Nextflow: `execution_report.html`, `execution_timeline.html`, `execution_trace.txt` and `pipeline_dag.dot`/`pipeline_dag.svg`.     * Reports generated by the pipeline: `pipeline_report.html`, `pipeline_report.txt` and `software_versions.tsv`.     * Reformatted samplesheet files used as input to the pipeline: `samplesheet.valid.csv`."},{"location":"user-guide/preparing-files/","title":"Prepare the Samplesheets","text":""},{"location":"user-guide/preparing-files/#samplesheet-for-quality_align-or-aquascope-workflows","title":"Samplesheet for <code>QUALITY_ALIGN</code> or <code>AQUASCOPE</code> workflows","text":"<ul> <li>Create a samplesheet using the following reference: <ul> <li><code>assets/samplesheet_test_illumina.csv</code></li> <li><code>assets/samplesheet_test_ont.csv</code></li> </ul> </li> </ul> <p>Notes:     - Currently, Illumina, Ion-torrent and Oxford Nanopore platforms are supported in this pipeline.     - Bedfiles can be a local file path or a raw.github url</p>"},{"location":"user-guide/preparing-files/#samplesheet-for-freyja_only-workflow","title":"Samplesheet for <code>FREYJA_ONLY</code> workflow","text":"<p>Option 1. Create a samplesheet using the following reference:      - <code>assets/samplesheet_test_bam.csv</code></p> <p>Option 2. Create samplesheet for primer trimmed bams using the python script <code>bin/bam_to_samplesheet.py</code> <pre><code>python bin/bam_to_samplesheet.py \\\n  --directory &lt;PATH_TO_BAM_FILES&gt; \\\n  --output &lt;OUTPUT_FILE&gt;\"\n</code></pre></p>"},{"location":"user-guide/preparing-files/#prepare-the-config-files","title":"Prepare the config files","text":"<p>Prepare the configuration files</p> <p>A. <code>scicomp.config</code>: CDC specific config to run on SciComp resources.</p> <p>B. <code>test.config</code> is prepared with default parameters; update as needed</p>"},{"location":"user-guide/run/","title":"Run the pipeline","text":""},{"location":"user-guide/run/#input-requirements","title":"Input Requirements","text":"<p>To run the pipeline, the following inputs may be given at run-time: - profile (required) - entry (required) - input (required) - outdir (optional) - references file (optional) - Freyja-specific files (optional)</p> <pre><code>    nextflow run main.nf \\\n    -profile &lt;docker/singularity/podman/shifter/charliecloud/conda/institute/test&gt; \\\n    -entry &lt;QUALITY_ALIGN, FREYJA_ONLY, AQUASCOPE&gt; \\\n    --input &lt;path/to/samplesheet&gt; \\\n    --outdir &lt;path/to/out/dir&gt; \\\n    --fasta &lt;/path/to/fasta/&gt; \\\n    --freyja_barcodes &lt;path_to_barcode_file&gt; \\\n    --freyja_lineages_meta &lt;path_to_lineage_file&gt; \\\n</code></pre>"},{"location":"user-guide/run/#profile-required","title":"Profile (Required)","text":"<p>Select from any of the profiles: - docker - singularity - podman - shifter - charliecloud - conda - instutitute_specific_profiles</p> <p>Example:</p> <pre><code>    nextflow run main \\\n    -profile docker,scicomp_rosalind \\\n    -entry AQUASCOPE \\\n    --input &lt;path/to/samplesheet&gt; \\\n    --outdir &lt;path/to/out/dir&gt;\n</code></pre>"},{"location":"user-guide/run/#entry-required","title":"Entry (Required)","text":"<p>Three entry points are available within Aquascope</p> <ul> <li> <p>QUALITY_ALIGN: Runs pipeline beginning from quality control through alignment</p> </li> <li> <p>FREYJA_ONLY: Runs the pipeline beginning with BAM files through variant calling</p> </li> <li> <p>AQUASCOPE: Runs both QUALITY_ALIGN followed by FREYJA_ONLY</p> </li> </ul> <pre><code>    nextflow run main.nf \\\n    -profile &lt;docker/singularity/podman/shifter/charliecloud/conda/institute&gt; \\\n    -entry &lt;QUALITY_ALIGN, FREYJA_ONLY, AQUASCOPE&gt; \\\n    --input &lt;path/to/samplesheet&gt; \\\n    --outdir &lt;path/to/out/dir&gt; \\\n    --fasta &lt;/path/to/fasta/&gt; \\\n    --freyja_barcodes &lt;path_to_barcode_file&gt; \\\n    --freyja_lineages_meta &lt;path_to_lineage_file&gt; \\\n</code></pre>"},{"location":"user-guide/run/#samplesheet-required","title":"Samplesheet (Required)","text":"<p>Refer to the <code>Preparing Files</code> documentaiton for specific samplesheet-related instructions.</p> <p>Example:</p> <pre><code>    nextflow run main.nf \\\n    -profile &lt;docker/singularity/podman/shifter/charliecloud/conda/institute&gt; \\\n    -entry &lt;QUALITY_ALIGN, FREYJA_ONLY, AQUASCOPE&gt; \\\n    --input samplesheet.csv \\\n    --outdir &lt;path/to/out/dir&gt;\n</code></pre>"},{"location":"user-guide/run/#references-optional","title":"References (Optional)","text":"<p>Fasta, BED and GFF parameters are defaulted to references in the assets folder of the pipeline. To change, the <code>--fasta</code>, <code>--gff</code> and <code>--gff3</code> are available as input parameters.</p> <ul> <li> <p>NOTES:</p> <ul> <li> <p>Docker isn't supported on CDC (Rosalind) infrastructure.</p> </li> <li> <p>BED file is used for QUALIMAP-BAMQC, GFF in GFF3 format for FREYJA variant calling </p> </li> </ul> </li> </ul> <p>Example:  <pre><code>    nextflow run main.nf \\\n    -profile &lt;docker/singularity/podman/shifter/charliecloud/conda/institute&gt; \\\n    -entry &lt;QUALITY_ALIGN, FREYJA_ONLY, AQUASCOPE&gt; \\\n    --input &lt;path/to/samplesheet&gt; \\\n    --outdir &lt;path/to/out/dir&gt; \\\n    --fasta reference.fasta\n</code></pre></p>"},{"location":"user-guide/run/#freyja-curated-lineages-barcodes","title":"Freyja Curated Lineages / Barcodes","text":"<p>Users can supply saved freyja-curated lineages and barcodes:</p> <pre><code>    nextflow run main.nf \\\n    -profile &lt;docker/singularity/podman/shifter/charliecloud/conda/institute&gt; \\\n    -entry &lt;QUALITY_ALIGN, FREYJA_ONLY, AQUASCOPE&gt; \\\n    --input &lt;path/to/samplesheet&gt; \\\n    --outdir &lt;path/to/out/dir&gt; \\\n    --freyja_barcodes &lt;path_to_barcode_file&gt; \\\n    --freyja_lineages_meta &lt;path_to_lineage_file&gt;\n</code></pre>"},{"location":"user-guide/test-info/","title":"6. Pipeline Tutorial","text":"<p>Welcome to the Aquascope Pipeline Tutorial!</p>"},{"location":"user-guide/test-info/#61-getting-started","title":"6.1 Getting Started","text":"<p>Review the information on the Getting Started for a complete overview of the pipeline. The tutorial below will use test data available as part of the pipeline in the assets folder that runs on any HPC environment and was primarily tested using singularity container. All example code will assume you are running v2.0.0 of the pipeline, using test data available on GitHub.</p> <p>A. Change launch directory to the CDCgov/aquascope folder after your git clone or nextflow pull the pipeline. B. CDC-Users Only Your NXF_WORK, NXF_CONDA_CACHEDIR, NXF_SINGULARITY_CACHEDIR &amp; NXF_TEMP are set to Scratch folder as soon as you module load Nextflow. To override the defults, please manually set these environemental variables in ~/.bashrc. C. CDC-Users Only Please check with your <code>HPC infrastructure Team</code> for custom config files. We have a <code>rosalind</code> cluster config to run this pipeline and please reach out to [<code>SciComp</code>] (https://info.biotech.cdc.gov/info/) for additional help.</p>"},{"location":"user-guide/test-info/#62-decide-the-test-to-perform","title":"6.2 Decide the test to perform","text":"<p>The pipeline includes three different entry points (View Getting Started for more information) and three different data inputs (Illumina, ONT, BAM). Determine which test meets your needs.</p> <p>A. Test Illumina Input  Test [samplesheet] (https://github.com/CDCgov/aquascope/blob/dev/assets/samplesheet_test_illumina.csv) is included in the .assets/ directory. The <code>test_illumina</code> profile will automatically configure this input.</p> <pre><code>### CDC Internal Users\nnextflow run \\\nmain.nf \\\n-profile test_illumina,singularity,scicomp_rosalind\n-entry AQUASCOPE\n\n### All Other Users\nnextflow run \\\nmain.nf \\\n-profile test_illumina,&lt;docker,singularity,nf-core institutional config\n-entry AQUASCOPE\n</code></pre> <p>B. Test ONT Input  Test [samplesheet] (https://github.com/CDCgov/aquascope/blob/dev/assets/samplesheet_test_ont.csv) is included in the .assets/ directory. The <code>test_ont</code> profile will automatically configure this input.</p> <pre><code>### CDC Internal Users\nnextflow run \\\nmain.nf \\\n-profile test_ont,singularity,scicomp_rosalind\n-entry AQUASCOPE\n\n### All Other Users\nnextflow run \\\nmain.nf \\\n-profile test_ont,&lt;docker,singularity,nf-core institutional config\n-entry AQUASCOPE\n</code></pre> <p>C. Test BAM Input  Test [samplesheet] (https://github.com/CDCgov/aquascope/blob/dev/assets/samplesheet_test_bam.csv) is included in the .assets/ directory. The <code>test_bams</code> profile will automatically configure this input.</p> <pre><code>### CDC Internal Users\nnextflow run \\\nmain.nf \\\n-profile test_bams,singularity,scicomp_rosalind\n-entry AQUASCOPE\n\n### All Other Users\nnextflow run \\\nmain.nf \\\n-profile test_bams,&lt;docker,singularity,nf-core institutional config\n-entry AQUASCOPE\n</code></pre>"}]}